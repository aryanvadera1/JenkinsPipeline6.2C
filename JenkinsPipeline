pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build (Maven)') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                // Run unit tests 
                sh 'run_unit_tests.sh'

                // Run integration tests 
                sh 'run_integration_tests.sh'
            }
        }
        stage('Code Analysis (SonarQube)') {
            steps {
                // Perform code analysis using SonarQube 
                sh 'sonar-scanner'
            }
        }
        stage('Security Scan (OWASP ZAP)') {
            steps {
                // Perform security scan using OWASP ZAP 
                sh 'owasp-zap-scan'
            }
        }
        stage('Deploy to Staging (AWS EC2)') {
            steps {
                // Deploy to staging 
                sh 'deploy_to_staging.sh'
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                // Run integration tests on staging 
                sh 'run_integration_tests_on_staging.sh'
            }
        }
        stage('Deploy to Production (AWS EC2)') {
            steps {
                // Deploy to production 
                sh 'deploy_to_production.sh'
            }
        }
    }

    post {
        success {
            // Send success notification email
            emailext(
                subject: 'Pipeline Success',
                body: 'The Jenkins pipeline has completed successfully.',
                attachLog: true,
                to: 'vaderaaryan1505@gmail.com'
            )
        }
        failure {
            // Send failure notification email
            emailext(
                subject: 'Pipeline Failure',
                body: 'The Jenkins pipeline has failed. Please investigate.',
                attachLog: true,
                to: 'vaderaaryan1505@gmail.com'
            )
        }
    }
}
